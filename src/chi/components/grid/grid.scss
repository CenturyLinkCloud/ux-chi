@import '_variables';
@import '_mixins';

.chi-grid {
  &__container {
    @include respond-to(md) {
      margin: 0 ($base-unit * 3);
    }
    margin: 0 ($base-unit * 2);
  }

  & {
    @include respond-to(md) {
      margin: 0 ($base-unit * -1.5);
    }
    display: flex;
    flex: 1 0 auto;
    flex-wrap: wrap;
    margin: 0 ($base-unit * -1);
  }

  &.-no-gutter {
    margin: 0;

    & > .chi-col {
      padding: 0;
    }
  }

  // Vertical Alignment

  &.-align--top {
    align-items: flex-start;
  }

  &.-align--center {
    align-items: center;
  }

  &.-align--bottom {
    align-items: flex-end;
  }
}

.chi-col {
  & {
    @include respond-to(md) {
      padding: 0 ($base-unit * 1.5);
    }
    flex: 1 0 0%;
    max-width: 100%;
    min-width: (100% / 12);
    padding: 0 $base-unit;
    position: relative;
  }

  // Stacking (on XS Viewports)
  @each $size in sm md lg xl {
    @include respond-to-only(xs) {
      &.-w-#{$size} {
        flex: 1 0 auto;
        width: 100%;
      }

      @for $i from 1 through 12 {
        &.-w-#{$size}--#{$i} {
          flex: 1 0 auto;
          width: 100%;
        }
      }
    }
  }

  // Sizing

  @for $i from 1 through 12 {
    &.-w--#{$i} {
      flex: 0 1 (100% / 12 * $i);
      width: (100% / 12 * $i);
    }
  }

  // Sizing by Viewport

  @each $size in sm md lg xl {
    @include respond-to($size) {
      @for $i from 1 through 12 {
        &.-w-#{$size}--#{$i} {
          flex: 0 1 (100% / 12 * $i);
          max-width: (100% / 12 * $i);
        }
      }
    }
  }

  // Offsets

  @for $i from 1 through 11 {
    &.-o--#{$i} {
      margin-left: (100% / 12 * $i);
    }

    @each $size in sm md lg xl {
      @include respond-to($size) {
        @for $i from 1 through 11 {
          &.-o-#{$size}--#{$i} {
            margin-left: (100% / 12 * $i);
          }
        }
      }
    }
  }

  // Vertical Alignment (Column-Specifics)

  &.-align--top {
    align-self: flex-start;
  }

  &.-align--center {
    align-self: center;
  }

  &.-align--bottom {
    align-self: flex-end;
  }

  // Reordering

  @for $i from 1 through 12 {
    &.-n--#{$i} {

      order: #{$i};
    }

    @each $size in xs sm md lg xl {
      @include respond-to($size) {
        @for $i from 1 through 12 {
          &.-n-#{$size}--#{$i} {

            order: #{$i};
          }
        }
      }
    }
  }

  @each $size in xs sm md lg xl {
    @include respond-to-only($size) {
      &.-#{$size}--hide {
        display: none;
      }
    }
  }

  @each $size in sm md lg xl {
    @include respond-to($size) {
      &.-#{$size}--hide-from {
        display: none;
      }
    }
  }
}

/* IE11 CSS hack */
// sass-lint:disable no-vendor-prefixes
@media all and (-ms-high-contrast: none) {
  .chi-col {
    // Sizing

    @for $i from 1 through 12 {
      &.-w--#{$i} {
        flex: 0 0 auto;
        width: (100% / 12 * $i);
      }
    }
  }
}

@media only screen and (min-width: $sm-breakpoint) and (-ms-high-contrast: none) {
  .chi-col {
    @for $i from 1 through 12 {
      &.-w-sm--#{$i} {
        flex: 0 0 auto;
        width: (100% / 12 * $i);
      }
    }
  }
}

@media only screen and (min-width: $md-breakpoint) and (-ms-high-contrast: none) {
  .chi-col {
    @for $i from 1 through 12 {
      &.-w-md--#{$i} {
        flex: 0 0 auto;
        width: (100% / 12 * $i);
      }
    }
  }
}

@media only screen and (min-width: $lg-breakpoint) and (-ms-high-contrast: none) {
  .chi-col {
    @for $i from 1 through 12 {
      &.-w-lg--#{$i} {
        flex: 0 0 auto;
        width: (100% / 12 * $i);
      }
    }
  }
}

@media only screen and (min-width: $xl-breakpoint) and (-ms-high-contrast: none) {
  .chi-col {
    @for $i from 1 through 12 {
      &.-w-xl--#{$i} {
        flex: 0 0 auto;
        width: (100% / 12 * $i);
      }
    }
  }
}
// sass-lint:enable no-vendor-prefixes
