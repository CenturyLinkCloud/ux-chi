@import '_mixins';
@import '_variables';

$state-colors: (
  brand: (
    color: navy,
    button-text-color: $text-white,
    tone: 70,
    tone-hover: 80,
    tone-focus: 90
  ),
  primary: (
    color: navy,
    button-text-color: $text-white,
    tone: 70,
    tone-hover: 80,
    tone-focus: 90
  ),
  secondary: (
    color: mint,
    button-text-color: $text-color,
    tone: 40,
    tone-hover: 50,
    tone-focus: 60
  ),
  danger: (
    color: red,
    button-text-color: $text-white,
    tone: 60,
    tone-hover: 70,
    tone-focus: 80
  ),
  dark: (
    color: grey,
    button-text-color: $text-white,
    tone: 100,
    tone-hover: 100,
    tone-focus: 100
  ),
  inverse: (
    color: white,
    button-text-color: $text-white,
    tone:  null,
    tone-hover: null,
    tone-focus: null,
  ),
  light: (
    color: white,
    button-text-color: $text-white,
    tone:  null,
    tone-hover: null,
    tone-focus: null,
  )
);

$border: 0.0625rem;

$sizes: (
  sm: (
    border-radius: 0.75rem,
    font-size: 0.75rem,
    line-height: 1rem,
    padding: (0.25rem - $border) (0.5rem - $border),
    icons: (
      height: 0.75rem,
      padding: 0.375rem - $border,
      width: 0.75rem,
      line-height: 0.75rem,
      font-size: 0.75rem,
    )
  ),
  // Legacy code start
  small: (
    border-radius: 0.75rem,
    font-size: 0.75rem,
    line-height: 1rem,
    padding: (0.25rem - $border) (0.5rem - $border),
    icons: (
      height: 0.75rem,
      padding: 0.375rem - $border,
      width: 0.75rem,
      line-height: 0.75rem,
      font-size: 0.75rem,
    )
  ),
  // Legacy code end
  md: (
    border-radius: 1rem,
    font-size: 0.875rem,
    line-height: 1rem,
    padding: (0.5rem - $border) (1rem - $border),
    icons: (
      height: 1rem,
      padding: 0.5rem - $border,
      width: 1rem,
      line-height: 1rem,
      font-size: 1rem,
    )
  ),
  lg: (
    border-radius: 1.25rem,
    font-size: 0.875rem,
    line-height: 1.25rem,
    padding: (0.625rem - $border) (1.5rem - $border),
    icons: (
      height: 1rem,
      padding: 0.75rem - $border,
      width: 1rem,
      line-height: 1rem,
      font-size: 1rem,
    )
  ),
  // Legacy code start
  large: (
    border-radius: 1.25rem,
    font-size: 0.875rem,
    line-height: 1.25rem,
    padding: (0.625rem - $border) (1.5rem - $border),
    icons: (
      height: 1rem,
      padding: 0.75rem - $border,
      width: 1rem,
      line-height: 1rem,
      font-size: 1rem,
    )
  ),
  // Legacy code end
  xl: (
    border-radius: 1.5rem,
    font-size: 0.875rem,
    line-height: 1.25rem,
    padding: (0.875rem - $border) (1.5rem - $border),
    icons: (
      height: 1rem,
      padding: 1rem - $border,
      width: 1rem,
      line-height: 1rem,
      font-size: 1rem,
    )
  )
);

.a-btn {
  & {
    align-items: center;
    background-color: set-color(white);
    border: $border solid set-color(grey, 30);
    border-radius: $border-radius;
    box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
    color: $text-color;
    cursor: pointer;
    display: inline-flex;
    font-family: $font-family;
    font-size: $text;
    font-weight: 600;
    line-height: $line-height-smaller;
    outline: 0;
    padding: (0.5rem - $border) (1rem - $border);
    text-align: center;
    vertical-align: middle;
    white-space: nowrap;

    &[disabled],
    &.-disabled {
      opacity: 0.65;
      pointer-events: none;

      & .a-icon {
        opacity: 0.65;
      }
    }

    .a-icon {
      height: 1rem;
      width: 1rem;
    }

    .a-spinner {
      height: 1rem;
      width: 1rem;
    }

    &__content {
      align-items: center;
      display: inline-flex;
      justify-content: center;

      & > :not(:last-child) {
        margin-right: 0.5rem;
      }
    }

    @each $type in map-keys($sizes) {
      &.-#{$type} {
        font-size: map-get(map-get($sizes, $type), font-size);
        line-height: map-get(map-get($sizes, $type), line-height);
        padding: map-get(map-get($sizes, $type), padding);

        .a-icon {
          height: map-get(map-get(map-get($sizes, $type), icons), height);
          width: map-get(map-get(map-get($sizes, $type), icons), width);

          &[class^="icon-"], &[class*=" icon-"] {
            font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
            line-height:map-get(map-get(map-get($sizes, $type), icons), line-height);
          }
        }

        .a-spinner {
          height: map-get(map-get(map-get($sizes, $type), icons), height);
          width: map-get(map-get(map-get($sizes, $type), icons), width);
        }

        &.-icon {
          padding: map-get(map-get(map-get($sizes, $type), icons), padding);
        }

        &.-pill {
          border-radius: map-get(map-get($sizes, $type), border-radius);
        }
      }
    }

    &:hover,
    &.-hover {
      border: $border solid set-color(grey, 40);
      box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
      text-decoration: none;
    }

    &:focus,
    &.-focus {
      border: $border solid set-color(grey, 40);
      box-shadow: 0 0 0 3px rgba(set-color(grey, 30), 0.6);
      z-index: $zindex-prominent;
    }

    &:active,
    &.-active {
      &,
      &:focus,
      &.-focus {
        background-color: set-color(grey, 20);
        border: $border solid set-color(grey, 40);
        box-shadow: inset 0 1px 2px 0 rgba(set-color(black), 0.2);
      }
    }

    &.-icon {
      padding: (0.5rem - $border);
    }

    &.-pill {
      border-radius: 1rem;
    }

    &.-float {
      border-radius: 50%;
      padding: 0.6875rem;
      transition: transform 0.2s cubic-bezier(0.95, -0.18, 0.65, 2.46);

      .a-icon {
        height: 1rem;
        width: 1rem;
      }

      &:active,
      &.-active,
      &:focus,
      &.-focus,
      &:hover,
      &.-hover {
        transform: scale(1.2);
      }
    }

    &.-fluid:not(.-float) {
      width: 100%;
    }

    &.-close {
      background-color: transparent;
      border: none;
      box-shadow: none;
      opacity: 0.6;

      &:hover,
      &.-hover {
        border: none;
        box-shadow: none;
        opacity: 1;
      }

      &:focus,
      &.-focus {
        border: none;
        box-shadow: none;
      }

      &:active,
      &.-active {
        &,
        &:focus,
        &.-focus {
          background-color: transparent;
          border: none;
          box-shadow: none;
        }
      }
    }

    &.-outline {
      background-color: transparent;
      border: $border solid set-color(grey, 50);

      &:hover,
      &.-hover {
        background-color: set-color(grey, 50);
        color: set-color(white);

        .a-icon {
          color: set-color(white);
        }

        .a-spinner__icon .path {
          stroke: set-color(white);
        }
      }

      &:focus,
      &.-focus {
        border: $border solid set-color(grey, 50);
        box-shadow: 0 0 0 3px rgba(set-color(grey, 50), 0.3);
      }

      &:active,
      &.-active {
        &,
        &:focus,
        &.-focus {
          background-color: set-color(grey, 60);
          border: $border solid rgba(set-color(black), 0.2);
          box-shadow: inset 0 1px 1px 0 rgba(set-color(black), 0.2);
          color: set-color(white);
        }

        .a-icon {
          color: set-color(white);
        }
      }
    }

    &.-flat {
      background-color: transparent;
      border: $border solid transparent;
      box-shadow: none;
      color: set-color(grey, 90);

      @each $type in map-keys($sizes) {
        &.-#{$type} {
          font-size: map-get(map-get($sizes, $type), font-size);
          line-height: map-get(map-get($sizes, $type), line-height);

          .a-icon {
            height: map-get(map-get(map-get($sizes, $type), icons), height);
            width: map-get(map-get(map-get($sizes, $type), icons), width);

            &[class^="icon-"], &[class*=" icon-"] {
              font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
              line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
            }
          }

          .a-spinner {
            height: map-get(map-get(map-get($sizes, $type), icons), height);
            width: map-get(map-get(map-get($sizes, $type), icons), width);
          }
        }
      }

      &:hover,
      &.-hover {
        border: $border solid set-color(grey, 40);
        box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);

        @each $type in map-keys($sizes) {
          &.-#{$type} {
            font-size: map-get(map-get($sizes, $type), font-size);
            line-height: map-get(map-get($sizes, $type), line-height);

            .a-icon {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);

              &[class^="icon-"], &[class*=" icon-"] {
                font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
                line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
              }
            }

            .a-spinner {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);
            }
          }
        }
      }

      &:focus,
      &.-focus {
        border: $border solid set-color(grey, 40);
        box-shadow: 0 0 0 3px rgba(set-color(grey, 30), 0.6);

        &.-icon {
          padding: (0.5rem - $border);
        }

        @each $type in map-keys($sizes) {
          &.-#{$type} {
            font-size: map-get(map-get($sizes, $type), font-size);
            line-height: map-get(map-get($sizes, $type), line-height);
            padding: map-get(map-get($sizes, $type), padding);

            .a-icon {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);

              &[class^="icon-"], &[class*=" icon-"] {
                font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
                line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
              }
            }

            .a-spinner {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);
            }

            &.-icon {
              padding: map-get(map-get(map-get($sizes, $type), icons), padding);
            }
          }
        }
      }

      &:active,
      &.-active {
        &,
        &:focus,
        &.-focus {
          background-color: set-color(grey, 20);
          border: $border solid rgba(set-color(black), 0.2);
          box-shadow: inset 0 1px 2px 0 rgba(set-color(black), 0.2);
        }

        &.-icon {
          padding: (0.5rem - $border);
        }

        @each $type in map-keys($sizes) {
          &.-#{$type} {
            font-size: map-get(map-get($sizes, $type), font-size);
            line-height: map-get(map-get($sizes, $type), line-height);
            padding: map-get(map-get($sizes, $type), padding);

            .a-icon {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);

              &[class^="icon-"], &[class*=" icon-"] {
                font-size: map-get(map-get(map-get($sizes, $type), icons), font-size);
                line-height: map-get(map-get(map-get($sizes, $type), icons), line-height);
              }
            }

            .a-spinner {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);
            }

            &.-icon {
              padding: (map-get(map-get(map-get($sizes, $type), icons), padding)) - $border;
            }
          }
        }
      }
    }
  }

  @each $color-definition in $state-colors {
    $type: nth($color-definition, 1);
    $color: map_get(nth($color-definition, 2), color);
    $button-text-color: map_get(nth($color-definition, 2), button-text-color);
    $tone: map_get(nth($color-definition, 2), tone);
    $tone-hover: map_get(nth($color-definition, 2), tone-hover);
    $tone-focus: map_get(nth($color-definition, 2), tone-focus);
    $tone-focus-shadow: map_get(nth($color-definition, 2), tone-hover);

    @if( $type == 'inverse') {
      &.-#{$type} {
        background-color: white;
        border: $border solid map_get(nth($color-definition, 2), button-text-color);
        box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
        color: $text-color;

        &:hover,
        &.-hover {
          background-color: white;
          border: $border solid white;
          box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
        }

        &:focus,
        &.-focus {
          box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: white;
            border: $border solid rgba(set-color(black), 0.2);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }
        }

        .a-icon {
          color: $text-color;
        }

        &.-icon {
          & .a-icon {
            color: $text-color;
          }

          &:hover,
          &.-hover {
            background-color: white;
            border: $border solid rgba(set-color(black), 0.2);
            color: $text-color;

            .a-icon {
              color: $text-color;
            }
          }

          &:focus,
          &.-focus {
            box-shadow: 0 0 0 3px rgba(set-color($color), 0.4);

            .a-icon {
              color: $text-color;
            }
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              box-shadow: none;
            }
          }
        }

        &.-flat {
          background-color: transparent;
          border: $border solid transparent;
          box-shadow: none;
          color: set-color($color);

          &:hover:not(.-icon),
          &.-hover:not(.-icon) {
            background-color: set-color(transparent);
            border: $border solid set-color($color);
            color: set-color($color);
          }

          &:focus,
          &.-focus {
            background-color: set-color(transparent);
            border: $border solid set-color($color);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: transparent;
              border: $border solid set-color($color);
              box-shadow: none;
              color: set-color($color);
            }
          }

          .a-icon {
            color: $text-white;
          }

          &.-icon {
            & .a-icon {
              color: set-color(grey, 50);
            }

            &:hover,
            &.-hover {
              background-color: transparent;
              border: $border solid set-color($color);
              color: $text-white;

              .a-icon {
                color: $text-white;
              }
            }

            &:focus,
            &.-focus {
              box-shadow: 0 0 0 3px rgba(set-color($color), 0.4);

              .a-icon {
                color: $text-white;
              }
            }

            &:active,
            &.-active {
              &,
              &:focus,
              &.-focus {
                box-shadow: none;

                .a-icon {
                  color: $text-white;
                }
              }
            }
          }
        }

        &.-outline {
          background-color: transparent;
          border: $border solid $text-white;
          box-shadow: none;
          color: $text-white;

          &:hover,
          &.-hover {
            background-color: white;
            color: $text-color;

            .a-icon {
              color: $text-color;
            }
          }

          &:focus,
          &.-focus {
            background-color: set-color(transparent);
            border: $border solid set-color($color);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: white;
              border: $border solid white;
              color: $text-color;

              .a-icon {
                color: $text-color;
              }
            }
          }

          .a-icon {
            color: $text-white;
          }

          &.-icon {
            & .a-icon {
              color: $text-white;
            }

            &:hover,
            &.-hover {
              background-color: white;
              border: $border solid white;
              color: $text-color;

              .a-icon {
                color: $text-color;
              }
            }

            &:focus,
            &.-focus {
              box-shadow: 0 0 0 3px rgba(set-color($color), 0.4);

              .a-icon {
                color: $text-white;
              }
            }

            &:active,
            &.-active {
              &,
              &:focus,
              &.-focus {
                background-color: white;
                box-shadow: none;
                border: $border solid white;
                color: $text-color;

                .a-icon {
                  color: $text-color;
                }
              }
            }
          }
        }
      }
    } @else if( $type == 'light') {
      &.-#{$type} {
        background-color: white;
        border: $border solid map_get(nth($color-definition, 2), button-text-color);
        box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
        color: $text-color;

        &:hover,
        &.-hover {
          background-color: white;
          border: $border solid white;
          box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
        }

        &:focus,
        &.-focus {
          box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: white;
            border: $border solid rgba(set-color(black), 0.2);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }
        }

        .a-icon {
          color: $text-color;
        }

        &.-icon {
          & .a-icon {
            color: $text-color;
          }

          &:hover,
          &.-hover {
            background-color: white;
            border: $border solid rgba(set-color(black), 0.2);
            color: $text-color;

            .a-icon {
              color: $text-color;
            }
          }

          &:focus,
          &.-focus {
            box-shadow: 0 0 0 3px rgba(set-color($color), 0.4);

            .a-icon {
              color: $text-color;
            }
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              box-shadow: none;
            }
          }
        }

        &.-flat {
          background-color: transparent;
          border: $border solid transparent;
          box-shadow: none;
          color: set-color($color);

          &:hover:not(.-icon),
          &.-hover:not(.-icon) {
            background-color: set-color(transparent);
            border: $border solid set-color($color);
            color: set-color($color);
          }

          &:focus,
          &.-focus {
            background-color: set-color(transparent);
            border: $border solid set-color($color);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: transparent;
              border: $border solid set-color($color);
              box-shadow: none;
              color: set-color($color);
            }
          }

          .a-icon {
            color: $text-white;
          }

          &.-icon {
            & .a-icon {
              color: set-color(grey, 50);
            }

            &:hover,
            &.-hover {
              background-color: transparent;
              border: $border solid set-color($color);
              color: $text-white;

              .a-icon {
                color: $text-white;
              }
            }

            &:focus,
            &.-focus {
              box-shadow: 0 0 0 3px rgba(set-color($color), 0.4);

              .a-icon {
                color: $text-white;
              }
            }

            &:active,
            &.-active {
              &,
              &:focus,
              &.-focus {
                box-shadow: none;

                .a-icon {
                  color: $text-white;
                }
              }
            }
          }
        }

        &.-outline {
          background-color: transparent;
          border: $border solid $text-white;
          box-shadow: none;
          color: $text-white;

          &:hover,
          &.-hover {
            background-color: white;
            color: $text-color;

            .a-icon {
              color: $text-color;
            }
          }

          &:focus,
          &.-focus {
            background-color: set-color(transparent);
            border: $border solid set-color($color);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: white;
              border: $border solid white;
              color: $text-color;

              .a-icon {
                color: $text-color;
              }
            }
          }

          .a-icon {
            color: $text-white;
          }

          &.-icon {
            & .a-icon {
              color: $text-white;
            }

            &:hover,
            &.-hover {
              background-color: white;
              border: $border solid white;
              color: $text-color;

              .a-icon {
                color: $text-color;
              }
            }

            &:focus,
            &.-focus {
              box-shadow: 0 0 0 3px rgba(set-color($color), 0.4);

              .a-icon {
                color: $text-white;
              }
            }

            &:active,
            &.-active {
              &,
              &:focus,
              &.-focus {
                background-color: white;
                box-shadow: none;
                border: $border solid white;
                color: $text-color;

                .a-icon {
                  color: $text-color;
                }
              }
            }
          }
        }
      }
    } @else {
      &.-#{$type} {
        background-color: set-color($color, $tone);
        border: $border solid set-color($color, $tone);
        box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
        color: set-color($button-text-color);

        .a-icon {
          color: inherit;
        }

        .a-spinner__icon .path {
          stroke: set-color(white);
        }

        &:hover,
        &.-hover {
          background-color: set-color($color, $tone-hover);
          border: $border solid set-color($color, $tone-hover);
          box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
        }

        &:focus,
        &.-focus {
          box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: set-color($color, $tone-focus);
            border: $border solid rgba(set-color(black), 0.2);
            box-shadow: inset 0 1px 1px 0 rgba(set-color(black), 0.2);
          }
        }

        &.-outline {
          background-color: transparent;
          border: $border solid set-color($color, $tone);
          color: set-color($color, $tone);

          .a-spinner__icon .path {
            stroke: set-color($color, $tone);
          }

          &:hover,
          &.-hover {
            background-color: set-color($color, $tone);
            color: set-color(white);

            @if ($type == 'secondary') {
              color: $text-color;
            }

            .a-icon {
              @if ($type == 'secondary') {
                color: $text-color;
              } @else {
                color: inherit;
              }
            }

            .a-spinner__icon .path {
              stroke: set-color(white);
            }
          }

          &:focus,
          &.-focus {
            border: $border solid set-color($color, $tone);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: set-color($color, $tone-focus);
              border: $border solid rgba(set-color(black), 0.2);
              box-shadow: inset 0 1px 1px 0 rgba(set-color(black), 0.2);

              @if ($type == 'secondary') {
                color: $text-color;
              } @else {
                color: set-color(white);
              }

              .a-icon {
                @if ($type == 'secondary') {
                  color: $text-color;
                } @else {
                  color: inherit;
                }
              }

              .a-spinner__icon .path {
                stroke: set-color(white);
              }
            }
          }
        }

        &.-flat {
          background-color: transparent;
          border: $border solid transparent;
          box-shadow: none;
          color: set-color($color, $tone);

          &:hover,
          &.-hover {
            border: $border solid set-color($color, $tone);
          }

          &:focus,
          &.-focus {
            border: $border solid set-color($color, $tone);
            box-shadow: 0 0 0 3px rgba(set-color($color, $tone-focus-shadow), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: transparent;
              border: $border solid set-color($color, $tone);
              box-shadow: none;
            }
          }
        }
      }
    }
  }
}
