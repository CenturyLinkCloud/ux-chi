{
  "timestamp": "2020-01-31T18:59:34",
  "compiler": {
    "name": "@stencil/core",
    "version": "1.7.5",
    "typescriptVersion": "3.6.3"
  },
  "components": [
    {
      "filePath": "src/components/alert/alert.tsx",
      "encapsulation": "scoped",
      "tag": "chi-alert",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "borderless",
          "type": "boolean",
          "mutable": false,
          "attr": "borderless",
          "reflectToAttr": true,
          "docs": "to get rid of the border-bottom of Banner alerts.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "center",
          "type": "boolean",
          "mutable": false,
          "attr": "center",
          "reflectToAttr": true,
          "docs": "to center the alert content.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set alert state { success, danger, warning, info, muted }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": true,
          "docs": "to make the alert dismissible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "to avoid necessity of adding <chi-icon> to alert markup.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mutable",
          "type": "boolean",
          "mutable": false,
          "attr": "mutable",
          "reflectToAttr": true,
          "docs": "to hide the alert when dismissed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set alert size { sm, md, lg }.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "mutable": false,
          "attr": "title",
          "reflectToAttr": true,
          "docs": "to define alert title.",
          "docsTags": [],
          "default": false,
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set alert type { bubble, banner, toast }.",
          "docsTags": [],
          "default": "'bubble'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "dismissAlert",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "custom event when trying to dismiss an alert.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "chi-icon",
        "chi-button"
      ],
      "dependencyGraph": {
        "chi-alert": [
          "chi-icon",
          "chi-button"
        ],
        "chi-button": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/badge/badge.tsx",
      "encapsulation": "scoped",
      "tag": "chi-badge",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set color of a badge { primary, success, warning, danger, dark, muted, secondary, light }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of a badge { xs or sm }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textTransform",
          "type": "string",
          "mutable": false,
          "attr": "text-transform",
          "reflectToAttr": true,
          "docs": "to transform the badge text { uppercase, lowercase, capitalized }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "to set variant of a badge { outline, flat }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/brand/brand.tsx",
      "encapsulation": "scoped",
      "tag": "chi-brand",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set brand color { black, white, inverse }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of brand.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set brand type { black, white, inverse }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/button/button.tsx",
      "encapsulation": "scoped",
      "tag": "chi-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alternativeText",
          "type": "string",
          "mutable": false,
          "attr": "alternative-text",
          "reflectToAttr": true,
          "docs": "to provide alternative text in case of icon buttons.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "center",
          "type": "boolean",
          "mutable": false,
          "attr": "center",
          "reflectToAttr": true,
          "docs": "to center align the text .",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set button color { primary, secondary, danger, dark, light }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "to disable chi-button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fluid",
          "type": "boolean",
          "mutable": false,
          "attr": "fluid",
          "reflectToAttr": true,
          "docs": "to render a button to fill the parent space.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set button size { sm, md, lg, xl }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "to set button type { float, close, icon }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "to set variant of a button { outline, flat }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "to emit a custom event when button is clicked.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [
        "chi-alert"
      ],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-button": [
          "chi-icon"
        ],
        "chi-alert": [
          "chi-button"
        ]
      }
    },
    {
      "filePath": "src/components/date/date.tsx",
      "encapsulation": "scoped",
      "tag": "chi-date",
      "readme": "# chi-date\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "format",
          "type": "string",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "Date format used in the attributes and how it will be shown to the user.",
          "docsTags": [],
          "default": "'MM/DD/YYYY'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": true,
          "docs": "Locale to use in date picker",
          "docsTags": [],
          "default": "'en'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Maximum eligible date",
          "docsTags": [],
          "default": "'12/31/2099'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Minimum eligible date",
          "docsTags": [],
          "default": "'01/01/1900'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected date in the date picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "signature": "getDate() => Promise<string>",
          "parameters": [],
          "docs": "Gets date",
          "docsTags": []
        },
        {
          "name": "setDate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setDate(date: any) => Promise<void>",
          "parameters": [],
          "docs": "Sets date",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDateChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Date change value event",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [
        "chi-date-picker"
      ],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-date": [
          "chi-icon"
        ],
        "chi-date-picker": [
          "chi-date"
        ]
      }
    },
    {
      "filePath": "src/components/date-picker/date-picker.tsx",
      "encapsulation": "scoped",
      "tag": "chi-date-picker",
      "readme": "# chi-date-picker\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Indicates whether the dropdown calendar is open or closed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "to disable chi-date-picker.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "string",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "Date format used in the attributes and how it will be shown to the user.",
          "docsTags": [],
          "default": "'MM/DD/YYYY'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": true,
          "docs": "Locale to use in date picker",
          "docsTags": [],
          "default": "'en'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Maximum eligible date",
          "docsTags": [],
          "default": "'12/31/2099'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Minimum eligible date",
          "docsTags": [],
          "default": "'01/01/1900'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Selected date in the date picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDate",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "signature": "getDate() => Promise<string>",
          "parameters": [],
          "docs": "Gets date",
          "docsTags": []
        },
        {
          "name": "setDate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setDate(date: any) => Promise<void>",
          "parameters": [],
          "docs": "Sets date",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "chi-popover",
        "chi-date"
      ],
      "dependencyGraph": {
        "chi-date-picker": [
          "chi-popover",
          "chi-date"
        ],
        "chi-date": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/drawer/drawer.tsx",
      "encapsulation": "scoped",
      "tag": "chi-drawer",
      "readme": "# chi-drawer\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "to open or close the drawer",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdrop",
          "type": "string",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": true,
          "docs": "to add a backdrop behind the drawer, which covers the viewport",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapsible",
          "type": "boolean",
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": true,
          "docs": "adds a close button",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerTitle",
          "type": "string",
          "mutable": false,
          "attr": "header-title",
          "reflectToAttr": true,
          "docs": "header title. Not compatible with headless",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headless",
          "type": "boolean",
          "mutable": false,
          "attr": "headless",
          "reflectToAttr": true,
          "docs": "to remove the space for the header",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "string",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "to set position of the drawer { top, right, bottom or left }",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the drawer",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the drawer.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggles active state (show/hide)",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiDrawer:hidden",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer has been hidden to the user. The animation has completed.",
          "docsTags": []
        },
        {
          "event": "chiDrawer:hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer hide method has executed, but the closing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiDrawer:show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer show method has executed, but the showing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiDrawer:shown",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Drawer has been shown to the user and is fully visible. The animation has completed.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-drawer": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/expansion-panel/expansion-panel.tsx",
      "encapsulation": "scoped",
      "tag": "chi-expansion-panel",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bordered",
          "type": "boolean",
          "mutable": false,
          "attr": "bordered",
          "reflectToAttr": true,
          "docs": "is the panel border-styled?",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "to set the title of the panel",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "string",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "to set expansion panel state. Possible values are: {'done', 'active', 'pending' (default value), and 'disabled'}",
          "docsTags": [],
          "default": "'pending'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "string",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "to set a step number next to the title of the panel",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/icon/icon.tsx",
      "encapsulation": "scoped",
      "tag": "chi-icon",
      "readme": "# chi-icon\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Color of the icon. Accepts any color the text-utility supports {primary, success, warning, danger, inverse, muted}",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": true,
          "docs": "OPTIONAL classes",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Icon to be rendered. View accepted values on text documentation.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "OPTIONAL. Size of the Icon. {xs, sm, sm--2, sm--3, md, lg, xl, xxl}",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [
        "chi-alert",
        "chi-button",
        "chi-date",
        "chi-drawer",
        "chi-number-input"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "chi-alert": [
          "chi-icon"
        ],
        "chi-button": [
          "chi-icon"
        ],
        "chi-date": [
          "chi-icon"
        ],
        "chi-drawer": [
          "chi-icon"
        ],
        "chi-number-input": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/label/label.tsx",
      "encapsulation": "scoped",
      "tag": "chi-label",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": true,
          "docs": "to set for attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/number-input/number-input.tsx",
      "encapsulation": "scoped",
      "tag": "chi-number-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "used to determine if component is disabled or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "used to set component's expanded mode",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputstyle",
          "type": "string",
          "mutable": false,
          "attr": "inputstyle",
          "reflectToAttr": false,
          "docs": "used to provide an input style like 'danger'. Mostly used for testing purposes",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "used to set a maximum allowed value",
          "docsTags": [],
          "default": "Number.MAX_SAFE_INTEGER",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "used to set a minimum allowed value",
          "docsTags": [],
          "default": "Number.MIN_SAFE_INTEGER",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventValueMutation",
          "type": "boolean",
          "mutable": false,
          "attr": "prevent-value-mutation",
          "reflectToAttr": true,
          "docs": "If set, component value won't be updated by itself.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "used to determine component's size",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "state",
          "type": "string",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "used to provide an input state like 'hover' or 'focus'. Mostly used for testing purposes",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "used to set a step to indicate the expected granularity",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "used to hold the value of the number input",
          "docsTags": [],
          "default": "'0'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chiChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "chi-icon"
      ],
      "dependencyGraph": {
        "chi-number-input": [
          "chi-icon"
        ]
      }
    },
    {
      "filePath": "src/components/popover/popover.tsx",
      "encapsulation": "scoped",
      "tag": "chi-popover",
      "readme": "# chi-popover\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "to open or close the popover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "arrow",
          "type": "boolean",
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": true,
          "docs": "to add an arrow between the popover and the reference element",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "to set position of the popover { top, top-start, top-end, right, right-start, right-end, bottom, bottom-start, bottom-end, left, left-start, left-end }",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventAutoHide",
          "type": "boolean",
          "mutable": false,
          "attr": "prevent-auto-hide",
          "reflectToAttr": true,
          "docs": "Prevents closing the popover when clicking out of its bounds",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reference",
          "type": "string",
          "mutable": false,
          "attr": "reference",
          "reflectToAttr": true,
          "docs": "CSS Selector to the reference Element. I.e. #id > p",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "mutable": false,
          "attr": "title",
          "reflectToAttr": true,
          "docs": "to define popover title.",
          "docsTags": [],
          "default": false,
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "To define popover variant { text, custom }",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the popover",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the popover.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggles active state (show/hide)",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "chiPopover:hidden",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover has been hidden to the user. The animation has completed.",
          "docsTags": []
        },
        {
          "event": "chiPopover:hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover hide method has executed, but the closing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiPopover:show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover show method has executed, but the showing animation has not started yet",
          "docsTags": []
        },
        {
          "event": "chiPopover:shown",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Popover has been shown to the user and is fully visible. The animation has completed.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [
        "chi-date-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "chi-date-picker": [
          "chi-popover"
        ]
      }
    },
    {
      "filePath": "src/components/progress/progress.tsx",
      "encapsulation": "scoped",
      "tag": "chi-progress",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "to set the max value of a progress bar.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "string",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "to indicate a progress bar state { info, warning, danger, success }.",
          "docsTags": [],
          "default": "'success'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "to set the value of a progress bar.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/spinner/spinner.tsx",
      "encapsulation": "scoped",
      "tag": "chi-spinner",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "backdrop",
          "type": "string",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": true,
          "docs": "to render spinners on dark or light backgrounds.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "to set color of a spinner { primary, success, warning, danger, muted }.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "to set size of a spinner { xs, sm, sm--2, sm--3, md, lg, xl, xxl }.",
          "docsTags": [],
          "default": "'sm'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/toggle-switch/toggle-switch.tsx",
      "encapsulation": "scoped",
      "tag": "chi-switch",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "used to check the toggle switch.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "used to disable the toggle switch.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "extraClass",
          "type": "string",
          "mutable": false,
          "attr": "extra-class",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideLabel",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": true,
          "docs": "used to disable the toggle labels.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "to set a label for the toggle switch.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "toggle",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "emitting a custom event toggle.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ]
}