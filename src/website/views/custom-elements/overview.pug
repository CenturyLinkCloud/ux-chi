---
title: Overview
---
p.-text.-mb--3
  | Chi Custom Elements is a library build on top of Chi and the
  | <a target="_blank" href="https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements">Custom Elements API</a>
  | from the HTML Living Standard.

h3 Adding Chi Custom Elements
p.-text
  | Adding Chi Custom Elements to your project is as simple as loading the Chi Custom Elements JavaScript files in the
  | header of your web application, from the <a href="https://assets.ctl.io">CenturyLink Assets Server</a>. Not only is
  | this a great way to get started with Chi, but it is also a highly available and performant option for loading the
  | required assets into your project.

.-mb--2
  :code(lang='html')
    <script type="module" src="https://assets.ctl.io/chi/1.3.0/js/ce/ux-chi-ce/ux-chi-ce.esm.js"></script>
    <script nomodule="" src="https://assets.ctl.io/chi/1.3.0/js/ce/ux-chi-ce/ux-chi-ce.js"></script>

p.-text
  span.a-badge.-primary.-mr1
    span Tip
  | It is important to place them in the header of your document to let them load any Polyfill in the case the browser
  | doesn't support Custom Elements.

p.-text: em An NPM package will be available shortly.

p.-text.-mb--3
  | At this point, you can use the components described in this documentation.

h3 Regarding HTML attributes and DOM properties
p.-text
  | Chi custom elements have different ways to operate with them. The most common ones are the HTML attributes
  | and the DOM properties. In most cases, we keep them synchronized. For example, the chi-button element has
  | a <code>size</code> attribute that can be accessed and modified in two ways.
p.-text Modifying the HTML attribute:
.-mb--2
  :code(lang='html')
    <chi-button id="close-btn" size="md">Close</chi-button>
    <script>
      document.getElementById("close-btn").setAttribute("size", "xl");
    </script>
p.-text Setting the DOM property:
.-mb--2
  :code(lang='html')
    <chi-button id="close-btn" size="md">Close</chi-button>
    <script>
      document.getElementById("close-btn").size="xl";
    </script>
p.-text
  span.a-badge.-primary.-mr1
    span Tip
  | DOM properties are camel case (headerTitle) while HTML attributes are kebab case (header-title).


h4 Boolean attributes and properties
p.-text
  | Some of our components have boolean attributes which work in the same way the well known <code>disabled</code>
  | attribute. Boolean attributes are <code>true</code> when the HTML element has the attribute and <code>false</code> when
  | not. You cannot set them to <code>false</code> like this:
.-mb--2
  :code(lang='html')
    <input type="text" disabled="false" />
    <chi-drawer active="false" />
p.-text
  | Boolean attributes can set to true this way:
.-mb--2
  :code(lang='html')
    <input type="text" disabled />
    <chi-drawer id="drawer" active />
    <script>
      document.getElementById("drawer").active = true;
      document.getElementById("drawer").setAttribute("active", "active");
    </script>
p.-text
  | And can set to false:
.-mb--2
  :code(lang='html')
    <input type="text"  />
    <chi-drawer id="drawer" />
    <script>
      document.getElementById("drawer").active = false;
      document.getElementById("drawer").removeAttribute("active");
    </script>
p.-text
  | Some components, like chi-drawer, have helper methods in order to change the state of commonly modified attributes:
.-mb--2
  :code(lang='html')
    <chi-drawer id="drawer" />
    <script>
      document.getElementById("drawer").show();   // This sets the active property to true
      document.getElementById("drawer").hide();   // This sets the active property to false
      document.getElementById("drawer").toggle(); // This toggles the state of the active property
    </script>

h2 Development Workflow
p.-text
  | Use the start command to start the Development Environment.

.-mb--2
  :code(lang='bash')
    $ chi start

p.-text
  | Once the container has been bootstrapped and the Chi project has started, connect to
  | <a href="http://localhost:8000/custom-elements/overview/">http://localhost:8000/custom-elements/overview/</a>
  | in your browser to load Chi. While running, any changes to the Chi source will be automatically reloaded in your
  | browser.

h2 Testing

h3 End-to-end tests
p.-text
  | <a target="_blank" href="https://www.cypress.io">Cypress</a> is used for end-to-end testing. Tests are located in the
  | <code>cypress/integration</code> folder. To make them run:
:code(lang='bash')
  $ chi test-e2e

p.-text
  | You can run end-to-end tests interactively by launching the <code>start</code> command and opening a local version of
  | the Cypress application. Then select the ux-chi root folder as the project folder.
:code(lang='bash')
  $ chi start

h3 Visual regression tests
p.-text
  | Chi has visual regression tests build for each component that are implemented in
  | <a target="_blank" href="https://github.com/garris/BackstopJS">BackstopJS</a>. Each Custom Element
  | component MUST have a Custom Element version for the same test files that are implemented in the normal version of Chi.
  | These tests are configured in the <code>backstop-non-responsive-ce.json</code> file.
p.-text
  | E.g. <code>test/chi/custom-elements/icons.pug</code> will be compared to <code>test/chi/components/icons.pug</code>
  | to ensure both components are rendered in the same way.
p.-text
  | This tests are run by the common test command
:code(lang='bash')
  $ chi test
p.-text Reports are available in the <code>reports/html_report/non_responsive_ce/</code> folder.

h2 Style guide

p.-text: em This style guide is based on <a target="_blank" href="https://stenciljs.com/docs/style-guide">the one used by Ionic team</a>.

h3 File structure
ul
  li.-text One component per file.
  li.-text
    | One component per directory. Though it may make sense to group similar components into the same directory, it's
    | easier to document components when each one has its own directory.
  li.-text Implementation (.tsx) and styles of a component should live in the same directory.

:code
  ├── icon
  │   ├── icon.scss
  │   ├── icon.tsx
  ├── card
  │   ├── card.scss
  │   ├── card.tsx
  │   └── test (to be defined)
  ├── card-content
  │   ├── card-content.scss
  │   └── card-content.tsx
  ├── card-title
  │   ├── card-title.scss
  │   ├── card-title.tsx

h3 Naming
h4 HTML tag
h5 PREFIX

p.-text
  | The prefix has a major role when you are creating a collection of components intended to be used across different
  | projects. Web Components are not scoped because they are globally declared within the webpage, which means a
  | "unique" prefix is needed to prevent collisions and can help to quickly identify the collection.
  | Additionally, web components are required to contain a "-" dash within the tag name, so using the
  | first section to namespace your components is a natural fit.

p.-text Tag prefix must be <code>chi</code>:

:code(lang="html")
  <chi-button>
  <chi-header>

h5 NAME

p.-text
  | Components are not actions, they are conceptually "things". It is better to use nouns instead of verbs, such as
  | "animation" instead of "animating". "input", "tab", "nav", "menu" are some examples. We must reproduce the name
  | of the <em>atom</em> or the <em>molecule</em> names used in the main Chi project.

p.-text
  | Chi dropdown uses the molecule name <code>m-dropdown</code>, and Chi icon uses the atom name <code>a-icon</code>,
  | so we must use <code>dropdown</code> and <code>icon</code> respectively.

h5 MODIFIERS

p.-text
  | When several components are related and/or coupled, it is a good practice to use common naming with different
  | modifiers, for example:
:code(lang="html")
  <chi-card>
  <chi-card-header>
  <chi-card-content>

h4 Component (TS class)
p.-text The name of the ES6 class of the component SHOULD NOT have a prefix since classes are scoped. There is no risk of collision.

:code(lang="javascript")
  @Component({
    tag: 'chi-button'
  })
  export class Button { ... }

  @Component({
    tag: 'chi-icon'
  })
  export class Icon { ... }

h3 TypeScript
p.-text
  | Follow <a target="_blank" href="https://github.com/ionic-team/tslint-ionic-rules/blob/master/tslint.js">tslint-ionic-rules</a>.
  | This file is located in /src/custom-elements/ and has to be configured in your editor.

p.-text Variable decorators should be inlined.

:code(lang="javascript")
  @Prop() name: string;
  @Element() el: HTMLElement;

p.-text Method decorator should be multi-line

:code(lang="javascript")
  @Listen('click')
  onClick() {
    ...
  }

p.-text Use private variables and methods as much as possible: They are useful to detect dead code and enforce encapsulation. Note that this is a feature which TypeScript provides to help hardening your code, but using private, public or protected does not make a difference in the actual JavaScript output.

p.-text Code with Method/Prop/Event/Component decorators should have jsdocs: This allows documentation generation and for a better user experience in an editor that has TypeScript intellisense. <em>Stencil auto-generated documentation will be included in the Chi documentation pages. </em>

h4 Properties

p.-text It is considered a good practice and SHOULD be configured to Reflect public properties to attributes.
:code(lang="javascript")
  @Prop({ reflect: true }) color: string;

p.-text
  | Properties SHOULDN'T be configured as mutable and, once a value is set by a user, the component should not update
  | it internally. Use it only if strictly necessary.
:code(lang="javascript")
  @Prop({ mutable: true}) color: string;

p.-text
  | Properties SHOULD have a default value and MUST be validated.

p.-text Sometimes it is enough validation the use of a definition type:
:code(lang="javascript")
  @Prop() bordered: boolean = false;
p.-text Other times a function with a @Watch decorator is necessary:
:code(lang="javascript")
  @Watch('name')
    validateName(newValue: string, oldValue: string) {
      const isBlank = typeof newValue == null;
      const has2chars = typeof newValue === 'string' && newValue.length >= 2;
      if (isBlank) { throw new Error('name: required') };
      if (!has2chars ) { throw new Error('name: has2chars') };
    }

h3 Styling

p.-text
  | Chi components will have scoped CSS, to prevent collisions when using in non-chi compatible environments.
:code(lang="javascript")
  @Component({
    tag: 'chi-icon',
    styleUrl: 'icon.scss',
    scoped: true
  })

p.-text
  | For the moment there is no support for per-version scoped CSS. This means that rules from two different
  | versions of chi components will collide, so should be avoided.

h4 Rules

ul.-text
  li Components MIGHT have a *.scss file that will import the necessary files from the project
  li All rules but font-face ones MUST be wrapped inside a <code>:host</code> rule to override a possible Chi default stylesheet
  li The default display for Custom Elements is <code>inline</code> so the developer MUST take care of this.

:code(lang="css")
  @import 'components/icons/webfont-font-face';
  :host(chi-icon) {
    @import '../../global/styles/common';
    @extend %root-typography;
    @import 'components/icons/icons';
    @import 'components/icons/webfont-icons';

    display: inline-block;
  }
