/*
 Library declaration.
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library

  This section always runs in the master jenkins.
*/

library(
      identifier: 'jsl-jenkins-shared-library@addNPX',
      retriever: modernSCM(
        [
          $class: 'GitSCMSource',
          remote: "git@github.com:jfranciscohernbal/jsl-jenkins-shared-library.git",
          credentialsId: 'SCMAUTO_SSH_DEVOPS_PIPELINE',
          extensions: [[$class: 'WipeWorkspace']]
        ]
      )
    ) _

pipeline {

    environment {

      
      //  Credentials:
      //  GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential. SCMAUTO_GITHUB contains the GitHub token from SCMAuto user, which need to have access to the repository.
      //  GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential. SCMAUTO_SSH_DEVOPS_PIPELINE contains the SSH key from SCMAuto user, which need to have access to the repository.
      //  DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export.
      //  KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export. For PRs.
      //  KUBE_CREDENTIALS_TEST Kubernetes access info, jenkins secret file credential with environment variables to export. For branches.
      //  AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
      //  SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
      //  GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
      //  JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
      //  MORPHEUS_CREDENTIALS Morpheus access info, jenkins secret text
      //  MSTEAMS_CREDENTIALS MS Teams access info, jenkins secret text
      //  QUALITY_GATE_CREDENTIALS Credentials to gather all the contract validation gates expected to be crossed.
      //  PROJECT_MAL The MAL of the project
      
      GITHUB_TOKEN_CREDENTIALS = 'SCMAUTO_GITHUB'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      DOCKER_CREDENTIALS = ''
      KUBE_CREDENTIALS = ''
      KUBE_CREDENTIALS_TEST = ''
      KUBE_CREDENTIALS_PROD = ''
      AMAZON_CREDENTIALS = ''
      SONARQUBE_CREDENTIALS = ''
      GCP_CREDENTIALS = ''
      JIRA_CREDENTIALS = ''
      MORPHEUS_CREDENTIALS = ''
      MSTEAMS_CREDENTIALS = ''
      QUALITY_GATE_CREDENTIALS = ''
      //Deployment control credentialsId
      AUTHORIZED_USERS = ''
      DEPLOY_AUTH_TOKEN = ''

      // Custom project variables
      // Add 
      PROJECT_NAME = 'current_project'
      DOCKER_REPO ='current_project/current_project_repo'
      PROJECT_MAL = "current_project mal"


      
      BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"
      IMAGE_NAME = "${env.PROJECT_NAME}"
      IMAGE_TAG =  "${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
      KUBE_DOCKER_SECRET_NAME_PROD = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
    }
    

    // Add parameters if needed or if deployment control is in place.
    // parameters {
    //      //https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
    //  text(name: 'GCR', defaultValue: '', description: 'Enter the GCR description. Only used in deployment to production stage.')
    //  text(name: 'VERSION', defaultValue: '', description: 'Version to deploy. Only used in deployment to production stage.')
    // }


    
    // https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    //Add agent sections in stages/stage if needed.
    
    agent {
        label 'Docker-enabled'
    }

    options {
      
      // https://www.jenkins.io/doc/book/pipeline/syntax/#options
      
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'10', daysToKeepStr: '30'))
      preserveStashes(buildCount: 10)
      disableConcurrentBuilds()
    }

    
    // https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
    
    triggers {
      issueCommentTrigger('.*test this please.*')
    }

    stages {
      stage('Summary') {
        steps {
          script {
            sh script: """
                echo "PROJECT_NAME: ${PROJECT_NAME}"
                echo "DOCKER_REPO: ${DOCKER_REPO}"
                echo "GIT_BRANCH: ${GIT_BRANCH}"
                echo "GIT_COMMIT: ${GIT_COMMIT}"
                echo "BRANCH_NAME: ${BRANCH_NAME}"
                echo "COMMIT_ID: ${COMMIT_ID}"
                echo "PULL_REQUEST: ${PULL_REQUEST}"
                echo "CHANGE_ID: ${env.CHANGE_ID}"
                echo "IMAGE_NAME: ${IMAGE_NAME}"
                echo "IMAGE_TAG: ${IMAGE_TAG}"                        
            """, label: "Details summary"
          }
        }
      }
      stage('Authorize - Prod only') {
        when {
          branch 'master'
        }
        steps {
          script {
            jslDeploymentControlKnob()
          }
        }
      }
      stage('Static Code Analysis') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            args '--shm-size=2gb'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_CREDENTIALS
          }
        }
        when {
          beforeAgent true
          not { branch 'master' }
        }
        stages {
          stage('Linting') {
            steps {
              script{
                // jslYarnWrapper('install')
                // jslNpmWrapper('run lint:fix')
                // jslNpmWrapper('run prettier:checker')
                echo "No full linting implemented in repo, skipping until linting is implemented globally"
              }
            }
          }
          stage('DevSecOps') {
            steps {
              script {
                jslGitHubSecurityAlert()
              }
            }
          }
          stage('Package Version') {
            steps {
              script {
                sh(script: """
                    git whatchanged -1 --format=oneline
                    git diff origin/master package.json | grep '"version":' || echo No package.json changes
                    git diff origin/master package-lock.json | grep '"version":' || echo No package-lock.json changes
                    if [ \$(git diff origin/master package.json | grep '"version":' | wc -l) -eq 2 ]; then
                        if [ \$(git diff origin/master package-lock.json | grep '"version":' | wc -l) -lt 2 ]; then
                            echo "##########################################################################################"
                            echo "### VERSION UPDATE package-lock.json IS REQUIRED ALONG WITH package.json               ###"
                            echo "##########################################################################################"
                            exit -1
                        fi
                        if [ \$(git whatchanged -1 --format=oneline | wc -l) -gt 3 ]; then
                            echo "##########################################################################################"
                            echo "### PACKAGE VERSION INCREASED ALONG WITH OTHER CHANGES - TESTS ABORTED                 ###"
                            echo "### A SEPARATE PULL REQUEST MUST BE CREATED TO BUMP UP PACKAGE VERSION                 ###"
                            echo "##########################################################################################"
                            exit -1
                        fi
                    fi
                    git diff HEAD~1 HEAD package.json
                    rm -rf version_bump
                    if [ \$(git diff HEAD~1 HEAD package.json | grep '"version":' | wc -l) -eq 2 ]; then
                      echo -n "yes" > version_bump
                    else
                      echo -n "no" > version_bump
                    fi
                    cat version_bump
                    echo "All good."
                """, label: "Package version validation")
                stash name: "VERSION_BUMP", includes: "version_bump"
              }
            }
          }
        }
      }
      stage('PR Build') {
        parallel {
          stage ('Building Chi') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              not { branch 'master' }
            }
            steps {
              script {
                jslYarnWrapper('install')
                jslNpmWrapper('run build')
                stash name: "DIST-CHI", includes: "dist/**"
                stash name: "NODEMODULES-CHI", includes: "node_modules/**"
              }
            }
          }
          stage ('Building Custom elements') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              not { branch 'master' }
            }
            steps {
              script {
                dir('src/custom-elements') {
                  jslYarnWrapper('install')
                  jslNpmWrapper('run build')
                  stash name: "DIST-CHI-CE", includes: "dist/**"
                  stash name: "NODEMODULES-CHI-CE", includes: "node_modules/**"
                }
              }
            }
          }
          stage ('Building Chi-vue') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              not { branch 'master' }
            }
            steps {
              script {
                dir('src/chi-vue') {
                  jslYarnWrapper('install')
                  jslNpmWrapper('run build:component')
                  stash name: "DIST-CHI-VUE", includes: "dist/**"
                  stash name: "NODEMODULES-CHI-VUE", includes: "node_modules/**"
                }
              }
            }
          }
        }
      }
      stage('Build for Production') {
        parallel {
          stage ('Building Chi') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              branch 'master'
            }
            steps {
              script {
                jslYarnWrapper('install')
                jslNpmWrapper('run build')
              }
            }
          }
          stage ('Building Custom elements') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              branch 'master'
            }
            steps {
              script {
                dir('src/custom-elements') {
                  jslYarnWrapper('install')
                  jslNpmWrapper('run build')
                }
              }
            }
          }
          stage ('Building Chi-vue') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              branch 'master'
            }
            steps {
              script {
                dir('src/chi-vue') {
                  jslYarnWrapper('install')
                  jslNpmWrapper('run build:component')
                }
              }
            }
          }
        }
      }
      stage ('Tests') {
        stages {
          stage ('Unit Testing') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              not { branch 'master' }
            }
            steps {
              script {
                sh "rm -rf dist"
                sh "rm -rf node_modules"
                unstash name: "DIST-CHI"
                unstash name: "NODEMODULES-CHI"
                dir ('src/custom-elements') {
                  sh "rm -rf dist"
                  sh "rm -rf node_modules"
                  unstash name: "DIST-CHI-CE"
                  unstash name: "NODEMODULES-CHI-CE"
                }
                dir ('src/chi-vue') {
                  sh "rm -rf dist"
                  sh "rm -rf node_modules"
                  unstash name: "DIST-CHI-VUE"
                  unstash name: "NODEMODULES-CHI-VUE"
                }
                sh script: """
                  whoami
                  ls -lrta
                  rm -rf reports test/bitmaps_test
                  mkdir -p reports/html_report/non_responsive
                  mkdir -p reports/html_report/non_responsive_ce
                  mkdir -p reports/html_report/responsive
                  cp -a config/backstop_data/bitmaps_reference/non_responsive reports/html_report/non_responsive_ce/bitmaps_reference
                  cp -a config/backstop_data/bitmaps_reference/non_responsive reports/html_report/non_responsive/bitmaps_reference
                  cp -a config/backstop_data/bitmaps_reference/responsive reports/html_report/responsive/bitmaps_reference
                """, label: "Copying config files"
                jslNpmWrapper('run test')
                echo "This will run Unit tests - Disabled until I fix permissions issues."
              }
            }
          }
          stage ('E2E Testing') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
                args '--shm-size=2gb'
                // registryUrl DOCKER_REGISTRY
                // registryCredentialsId DOCKER_CREDENTIALS
              }
            }
            when {
              beforeAgent true
              not { branch 'master' }
            }
            steps {
              script {
                sh """
                  whoami
                  ls -lah
                """
                sh "rm -rf dist"
                sh "rm -rf node_modules"
                jslYarnWrapper('install')
                jslYarnWrapper('cache clean')
                unstash name: "DIST-CHI"
                dir ('src/custom-elements') {
                  sh "rm -rf dist"
                  sh "rm -rf node_modules"
                  unstash name: "DIST-CHI-CE"
                  unstash name: "NODEMODULES-CHI-CE"
                }
                dir ('src/chi-vue') {
                  sh "rm -rf dist"
                  sh "rm -rf node_modules"
                  unstash name: "DIST-CHI-VUE"
                  unstash name: "NODEMODULES-CHI-VUE"
                }
                jslNpxWrapper('gulp serve 2>&1 >/dev/null &')
                sh script: """
                  ./node_modules/.bin/cypress run
                """, label: "Running NPX before adding JSL file, TEST."
                jslNpxWrapper('gulp serve:stop')
                echo "This will run E2E tests, when NPX is added to the JSL"
              }
            }
          }
        }
      }
      stage('Coverage'){
        when {
          beforeAgent true
          not { branch 'master' }
        }
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        steps {
          script {
            // jslYarnWrapper('install')
            // sh "rm -rf .nyc_output*"
            // sh "rm -rf coverage/"
            // unstash name: "NYC_OUTPUT_UNIT"
            // unstash name: "NYC_OUTPUT_E2E"
            // jslNpmWrapper('run cover:merge')
            // archiveArtifacts artifacts: '.nyc_output/**'
            // jslNpmWrapper('run cover:report:jenkins || echo Error when evaluating coverage report!')
            // stash name: "COVERAGE", includes: "coverage/**"
            // archiveArtifacts artifacts: 'coverage/**'
            // jslQualityGateCodeCoverage('./cicd/docker/SonarQube/sonar-project.properties')
            echo "Coverage will be enabled as soon as Sonarqube is available for CHI"
          }
        }
      }
      stage('Coverage upload to Sonarqube'){
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        steps {
          script {
            // try {
            //   unstash name: "COVERAGE"
            // }  catch (Exception e) {
            //   echo "No coverage data"
            // }
            // jslSonarQubeStaticAnalysis('./cicd/docker/SonarQube/sonar-project.properties', env.SONARQUBE_CREDENTIALS)
            echo "Coverage upload will be enabled as soon as Sonarqube is available for CHI"
          }
        }
      }
      stage('Quality Gate Check'){
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        steps {
          script {
            // jslQualityGate()
            echo "Quality gate check will be enabled as soon as Sonarqube is available for CHI"
          }
        }
      }
      stage('Smoke Tests') {
        when {
          beforeAgent true
          allOf {
            not { branch 'master' }
            expression{ return currentBuild.currentResult.toLowerCase() == "success" }
          }
        }
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/sonar-scanner'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        steps {
          script {
            // unstash name: "E2E_REPORTS"
            // def cypress_url = parseIngressUrl()
            // echo "Deployment is reachable at ${cypress_url}"
            // jslNpmWrapper('ci')
            // jslNpmWrapper("run test:smoke:jenkins -- --url ${cypress_url} || echo Smoke Tests failed!")
            // echo "Smoke Tests completed"
            // jslPublishTestResults('tests/e2e/reports/*xml')
            // stash name: "E2E_REPORTS", includes: "tests/e2e/reports/**"

            // def VIDEOS_AVAILABLE = -1
            // VIDEOS_AVAILABLE = sh(script: "ls tests/e2e/videos/*", returnStatus: true)
            // if (VIDEOS_AVAILABLE == 0) {
            //   archiveArtifacts artifacts: 'tests/e2e/videos/**/*'
            // }
            // def SCREENSHOTS_AVAILABLE = -1
            // SCREENSHOTS_AVAILABLE = sh(script: "ls tests/e2e/screenshots/*", returnStatus: true)
            // if (SCREENSHOTS_AVAILABLE == 0) {
            //   archiveArtifacts artifacts: 'tests/e2e/screenshots/**/*'
            echo "Depends on NPX being available for testing on the JSL"
          }
        }
      }
      stage('Adoption Stats') {
        agent {
          dockerfile {
            filename 'Dockerfile'
            dir 'cicd/docker/jira'
            label 'Docker-enabled'
            // registryUrl DOCKER_REGISTRY
            // registryCredentialsId DOCKER_LOGIN_CREDENTIALS
          }
        }
        steps {
          script {
            // try {
            //   unstash name: "E2E_REPORTS"
            //   jslAdoptionMain('tests/e2e/reports/*xml')
            // } catch (Exception e) {
            //   try {
            //     unstash name: "UNIT_REPORTS"
            //     jslAdoptionMain('tests/unit/reports/*xml')
            //     echo "No E2E results found, reporting only unit"
            //   } catch (Exception exc) {
            //     echo "No E2E or Unit results found, reporting simple unit"
            //     unstash name: "TEST_PROD"
            //     jslAdoptionMain('test-results.xml')
            //   }
            echo "Adoption stats will be enabled as soon as E2E testing is enabled"
          }
        }
      }
      stage('Version check & Publish to GitHub') {
        when {
          beforeAgent true
          expression {
            unstash name: "VERSION_BUMP"
            def versionBump = readFile file: "version_bump"
            echo "Publish condition: GIT_BRANCH is _${env.GIT_BRANCH.trim().toLowerCase()}_"
            echo "Publish condition: currentResult is _${currentBuild.currentResult.toLowerCase()}_"
            echo "Publish condition: versionBump is _${versionBump.trim()}_"
            return versionBump.trim() == "yes" && currentBuild.currentResult.toLowerCase() == "success" && ['origin/master', 'origin/main', 'master', 'main'].contains(env.GIT_BRANCH.trim().toLowerCase())
          }
        }
        stages {
          stage('GitHub Release') {
            agent {
              dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/sonar-scanner'
                label 'Docker-enabled'
              }
            }
            steps {
              script {
                // def packageJson = readJSON file: 'package.json'
                // def tagName = "${packageJson.version}"
                // echo "Release tag is ${tagName}"
                // def releaseId = jslGitHubReleaseGetId(tagName)
                // sh "touch do_release"
                // if (releaseId == null) {
                //   def committishName = GIT_BRANCH
                //   if (GIT_BRANCH.startsWith('origin/')) {
                //     committishName = GIT_BRANCH.split("/")[1]
                //   }
                //   releaseId = jslGitHubReleaseCreate(tagName, committishName)
                //   if (releaseId == null) {
                //     throw new Exception("There was an error publishing the release")
                //   }
                //   sh "echo -n yes > do_release"
                // } else {
                //   echo "A release already exists for ${tagName}"
                //   sh "echo -n no > do_release"
                // }
                // stash name: "DO_RELEASE", includes: "do_release"
                echo "Active development, will activate as soon as this works"
              }
            }
          }
        }
      }
      stage ('Publish to S3') {
        parallel {
          stage ('Publish Dev/Beta build') {
            when {
              beforeAgent true
              not { branch 'master' }
            }
            steps {
              // script {
                echo "This will publish dev build to S3"
              // }
            }
          }
          stage ('Publish Prod Build') {
            when {
              beforeAgent true
              branch 'master'
            }
            steps {
              // script {
                echo "This will publish Prod build to S3 & CDN"
              // }
            }
          }            
        }
      }
      stage ('Cleaning...') {
        steps {
          echo "Pipeline finished!"
        }
      }
    }
    post {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#post

      Always post somewhere the watermark:
  	- md5sum of Jenkinsfile
  	- Output of the Jenkinsfile checker output
      */
      always {
        cleanWs()  
      }
    }
}