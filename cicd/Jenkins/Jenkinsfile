/*
 Library declaration.
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library

  This section always runs in the master jenkins.
*/

library(
      identifier: 'jsl-jenkins-shared-library@master',
      retriever: modernSCM(
        [
          $class: 'GitSCMSource',
          remote: "git@github.com:jfranciscohernbal/jsl-jenkins-shared-library.git",
          credentialsId: 'SCMAUTO_SSH_DEVOPS_PIPELINE',
          extensions: [[$class: 'WipeWorkspace']]
        ]
      )
    ) _

pipeline {

    environment {

      
      //  Credentials:
      //  GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential. SCMAUTO_GITHUB contains the GitHub token from SCMAuto user, which need to have access to the repository.
      //  GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential. SCMAUTO_SSH_DEVOPS_PIPELINE contains the SSH key from SCMAuto user, which need to have access to the repository.
      //  DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export.
      //  KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export. For PRs.
      //  KUBE_CREDENTIALS_TEST Kubernetes access info, jenkins secret file credential with environment variables to export. For branches.
      //  AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
      //  SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
      //  GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
      //  JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
      //  MORPHEUS_CREDENTIALS Morpheus access info, jenkins secret text
      //  MSTEAMS_CREDENTIALS MS Teams access info, jenkins secret text
      //  QUALITY_GATE_CREDENTIALS Credentials to gather all the contract validation gates expected to be crossed.
      //  PROJECT_MAL The MAL of the project
      
      GITHUB_TOKEN_CREDENTIALS = 'SCMAUTO_GITHUB'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      DOCKER_CREDENTIALS = ''
      KUBE_CREDENTIALS = ''
      KUBE_CREDENTIALS_TEST = ''
      KUBE_CREDENTIALS_PROD = ''
      AMAZON_CREDENTIALS = ''
      SONARQUBE_CREDENTIALS = ''
      GCP_CREDENTIALS = ''
      JIRA_CREDENTIALS = ''
      MORPHEUS_CREDENTIALS = ''
      MSTEAMS_CREDENTIALS = ''
      QUALITY_GATE_CREDENTIALS = ''
      //Deployment control credentialsId
      AUTHORIZED_USERS = ''
      DEPLOY_AUTH_TOKEN = ''

      // Custom project variables
      // Add 
      PROJECT_NAME = 'current_project'
      DOCKER_REPO ='current_project/current_project_repo'
      PROJECT_MAL = "current_project mal"


      
      BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"
      IMAGE_NAME = "${env.PROJECT_NAME}"
      IMAGE_TAG =  "${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
      KUBE_DOCKER_SECRET_NAME_PROD = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
    }
    

    // Add parameters if needed or if deployment control is in place.
    // parameters {
    //      //https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
    //  text(name: 'GCR', defaultValue: '', description: 'Enter the GCR description. Only used in deployment to production stage.')
    //  text(name: 'VERSION', defaultValue: '', description: 'Version to deploy. Only used in deployment to production stage.')
    // }


    
    // https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    //Add agent sections in stages/stage if needed.
    
    agent {
      label 'Docker-enabled'
    }

    options {
      
      // https://www.jenkins.io/doc/book/pipeline/syntax/#options
      
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'10', daysToKeepStr: '30'))
      preserveStashes(buildCount: 10)
      disableConcurrentBuilds()
    }

    
    // https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
    
    triggers {
      issueCommentTrigger('.*test this please.*')
    }

    stages {

      stage('PR Build') {
        when {
            beforeAgent true
            not { branch 'master' }
        } 
        agent {
        //   dockerfile {
            // filename 'Dockerfile'
            // dir 'cicd/docker/helm'
            label 'Docker-enabled'
        //   }
        }
        steps {
          script {
            sh script: """
                scripts/dockerCI.sh alias
                source ~/.bash_profile
                sudo rm -rf src/chi-vue/dist
                sudo rm -rf src/custom-elements/dist
                chi test
            """, label: "Running Chi from its container as always" 
          }
        }
      }
    }
    post {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#post

      Always post somewhere the watermark:
  	- md5sum of Jenkinsfile
  	- Output of the Jenkinsfile checker output
      */
      always {
        cleanWs()  
      }
    }
}