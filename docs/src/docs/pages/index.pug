---
title: Getting Started
---

p.-text
  | Chi provides developers with a collection of HTML and CSS patterns to build fast, reusable, and consistent responsive interfaces.

h3 Adding Chi
p.-text
  | Adding Chi to your project is as simple as loading the Chi stylesheet from the <a href="https://assets.ctl.io">CenturyLink Assets Server</a>.
  | Not only is this a great way to get started with Chi, it is also a highly available and performant option for loading the required
  | assets into your project.

.-mb2
  :code(lang='html')
    <link rel="stylesheet" href="https://assets.ctl.io/chi/0.8.0/chi.css">

p.-text
  | Next, in order to begin styling your project with Chi, you will need to add the <code>chi</code> CSS class to the <code>&lt;html&gt;</code>
  | tag of your document, for example:

.-mb2
  :code(lang='html')
    <html class="chi">
      ...
    </html>

p.-text
  | At this point you will be able to target the styles available in Chi by referencing documentation.

h3 Development Workflow
p.-text The preferred way to setup your development environment is with Docker. If you have Docker installed, run the command:

.-mb2
  :code(lang='bash')
    $ npm run docker -- start

p.-text
  | Once the container has been bootstrapped and the Chi project has started, connect to <a href="http://localhost:8000">http://localhost:8000</a>
  | in your browser to load Chi. While running, any changes to the Chi source will be automatically reloaded in your browser.

p.-text You may also run the project without Docker by following the standard conventions for Node.js-based applications:

.-mb2
  :code(lang='bash')
    $ npm install
    $ npm start

h3 Testing Changes
p.-text
  | We use <a href="https://garris.github.io/BackstopJS">BackstopJS</a> for visual regression testing of our CSS components.
  | In order to account for differences in development environments we always run these tests in a consistent Docker container.
  | To execute the test suite, run the following command:

.-mb2
  :code(lang='bash')
    $ npm run docker -- test

p.-text
  | A report containing the results of the test will be created under <code>reports/html_report</code>. If there were failures,
  | you will need to visually examine the changes and act appropriately based on the anticipated results.

p.-text
  | If you receive a test failure and you've made changes that you know are correct, you will need to override the test
  | references with your new changes by running the <code>approve</code> command on BackstopJS:

.-mb2
  :code(lang='bash')
    $ npm run docker -- approve

p.-text Once you have approved the changes, commit the new reference files with your changes.
